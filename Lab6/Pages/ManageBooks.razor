@using Lab6.Models
@page "/ManageBooks"
@inject IBookService BookService
@inject NavigationManager Navigation


<h3>Manage Books</h3>

<button @onclick="OpenAddBookModal">Add Book</button>

@if (isAddEditModalOpen)
{
    <div class="modal">
        <div class="modal-content">
            <span class="close" @onclick="CloseAddEditBookModal">&times;</span>
            <h4>@(isEditing ? "Edit Book" : "Add Book")</h4>
            <!-- Bind input fields to Book properties -->
            <input type="text" @bind="newBook.Title" placeholder="Title" /><br />
            <input type="text" @bind="newBook.Author" placeholder="Author" /><br />
            <input type="text" @bind="newBook.ISBN" placeholder="ISBN" /><br />
            <button @onclick="HandleButtonClick">
                @if (isEditing)
                {<text>Edit Book</text>}
            else
            {<text>Add Book</text>}
            </button>
            <button @onclick="CloseAddEditBookModal">Cancel</button>
            <!-- Display error message -->
            @if (!string.IsNullOrWhiteSpace(ErrorMessage))
            {
                <p style="color: red;">@ErrorMessage</p>
            }
            <!-- Display success message -->
            @if (!string.IsNullOrWhiteSpace(SuccessMessage))
            {
                <p style="color: green;">@SuccessMessage</p>
            }
        </div>
    </div>
}

<!-- Delete Book Modal -->
<button @onclick="OpenDeleteBookModal">Delete Book</button>

@if (isDeleteModalOpen)
{
    <div class="modal">
        <div class="modal-content">
            <span class="close" @onclick="CloseDeleteBookModal">&times;</span>
            <h4>Delete Book</h4>
            <p>Are you sure you want to delete this book?</p>
            <!-- Display list of books -->
            @if (books != null && books.Any())
            {
                <select @bind="selectedBookIdToDelete">
                    @foreach (var book in books)
                    {
                        <option value="@book.Id">@book.Title by @book.Author (ISBN: @book.ISBN)</option>
                    }
                </select>
            }
            else
            {
                <p>No books available.</p>
            }

            <!-- Button to trigger deletion -->
            <button @onclick="DeleteSelectedBook">Delete</button>
            <button @onclick="CloseDeleteBookModal">Cancel</button>
        </div>
    </div>
}







<button @onclick="ListAllBooks">List All Books</button>
@if (books != null && books.Any())
{
    <h4>Available Books</h4>
    <ul>
        @foreach (var book in books)
        {
            <li>@book.Title by @book.Author (ISBN: @book.ISBN)</li>
            <button @onclick="() => OpenEditBookModal(book)">Edit</button>
        }
    </ul>
}

<button @onclick="GoBack">Go Back</button>



@code {
    bool isAddEditModalOpen = false;
    bool isDeleteModalOpen = false;
    bool isEditing = false;
    Book newBook = new Book();
    List<Book> books = new List<Book>();


    string ErrorMessage { get; set; } // Property for storing error message
    string SuccessMessage { get; set; } // Property for storing success message

    void OpenAddBookModal()
    {
        isEditing = false;
        isAddEditModalOpen = true;
        ErrorMessage = ""; // Clear error message when opening modal
        SuccessMessage = ""; // Clear success message when opening modal
    }

    void CloseAddEditBookModal()
    {
        isAddEditModalOpen = false;
    }

    void OpenDeleteBookModal()
    {
        isDeleteModalOpen = true;


    }

    int selectedBookIdToDelete { get; set; }

    async Task DeleteSelectedBook()
    {
        await DeleteBook(selectedBookIdToDelete);
    }

    void CloseDeleteBookModal()
    {
        isDeleteModalOpen = false;
    }

    void AddBook()
    {
        if (string.IsNullOrWhiteSpace(newBook.Title) || string.IsNullOrWhiteSpace(newBook.Author) || string.IsNullOrWhiteSpace(newBook.ISBN))
        {
            ErrorMessage = "All fields are required.";
            return;
        }

        // Add book using BookService
        BookService.AddBook(newBook);
        SuccessMessage = "Book added successfully!";
        CloseAddEditBookModal();
    }

    void OpenEditBookModal(Book book)
    {
        isEditing = true;
        newBook = new Book
        {
            Id = book.Id,
            Title = book.Title,
            Author = book.Author,
            ISBN = book.ISBN
        };
        isAddEditModalOpen = true;
        ErrorMessage = ""; // Clear error message when opening modal
        SuccessMessage = ""; // Clear success message when opening modal
    }

    async Task EditBook()
    {
        if (string.IsNullOrWhiteSpace(newBook.Title) || string.IsNullOrWhiteSpace(newBook.Author) || string.IsNullOrWhiteSpace(newBook.ISBN))
        {
            ErrorMessage = "All fields are required.";
            return;
        }

        // Edit book using BookService
        BookService.EditBook(newBook);
        SuccessMessage = "Book edited successfully!";
        CloseAddEditBookModal();
    }




    async Task DeleteBook(int bookId)
    {
        Book bookToDelete = books.FirstOrDefault(b => b.Id == bookId);

        if (bookToDelete != null)
        {
            BookService.DeleteBook(bookToDelete.Id);
            books.Remove(bookToDelete);
            SuccessMessage = "Book deleted successfully!";
        }
        else
        {
            ErrorMessage = "Book not found!";
        }
    }

    async Task ListAllBooks()
    {
        books = await BookService.GetBooks();
    }

    void HandleButtonClick()
    {
        if (isEditing)
        {
            EditBook();
        }
        else
        {
            AddBook();
        }
    }

    void GoBack()
    {
        Navigation.NavigateTo("/"); 
    }
}
