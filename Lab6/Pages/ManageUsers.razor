@using Lab6.Models
@page "/ManageUsers"
@inject IUserService UserService
@inject NavigationManager Navigation

<h3>Manage Users</h3>

<button @onclick="OpenAddUserModal">Add User</button>

@if (isAddEditModalOpen)
{
    <div class="modal">
        <div class="modal-content">
            <span class="close" @onclick="CloseAddEditUserModal">&times;</span>
            <h4>@(isEditing ? "Edit User" : "Add User")</h4>
            <!-- Bind input fields to User properties -->
            <input type="text" @bind="newUser.Name" placeholder="Name" /><br />
            <input type="text" @bind="newUser.Email" placeholder="Email" /><br />
            <button @onclick="HandleButtonClick">
                @if (isEditing)
                {
                    <text>Edit User</text>
                }
                else
                {
                    <text>Add User</text>
                }
            </button>
            <button @onclick="CloseAddEditUserModal">Cancel</button>
            <!-- Display error message -->
            @if (!string.IsNullOrWhiteSpace(ErrorMessage))
            {
                <p style="color: red;">@ErrorMessage</p>
            }
            <!-- Display success message -->
            @if (!string.IsNullOrWhiteSpace(SuccessMessage))
            {
                <p style="color: green;">@SuccessMessage</p>
            }
        </div>
    </div>
}

<!-- Delete User Modal -->
<button @onclick="OpenDeleteUserModal">Delete User</button>

@if (isDeleteModalOpen)
{
    <div class="modal">
        <div class="modal-content">
            <span class="close" @onclick="CloseDeleteUserModal">&times;</span>
            <h4>Delete User</h4>
            <p>Are you sure you want to delete this user?</p>
            <!-- Display list of users -->
            @if (users != null && users.Any())
            {
                <select @bind="selectedUserIdToDelete">
                    @foreach (var user in users)
                    {
                        <option value="@user.Id">@user.Name (Email: @user.Email)</option>
                    }
                </select>
            }
            else
            {
                <p>No users available.</p>
            }

            <!-- Button to trigger deletion -->
            <button @onclick="DeleteSelectedUser">Delete</button>
            <button @onclick="CloseDeleteUserModal">Cancel</button>
        </div>
    </div>
}

<button @onclick="ListAllUsers">List All Users</button>
@if (users != null && users.Any())
{
    <h4>Available Users</h4>
    <ul>
        @foreach (var user in users)
        {
            <li>@user.Name (Email: @user.Email)</li>
            <button @onclick="() => OpenEditUserModal(user)">Edit</button>
        }
    </ul>
}

<button @onclick="GoBack">Go Back</button>

@code {
    bool isAddEditModalOpen = false;
    bool isDeleteModalOpen = false;
    bool isEditing = false;
    User newUser = new User();
    List<User> users = new List<User>();

    string ErrorMessage { get; set; } // Property for storing error message
    string SuccessMessage { get; set; } // Property for storing success message

    void OpenAddUserModal()
    {
        isEditing = false;
        isAddEditModalOpen = true;
        ErrorMessage = ""; // Clear error message when opening modal
        SuccessMessage = ""; // Clear success message when opening modal
    }

    void CloseAddEditUserModal()
    {
        isAddEditModalOpen = false;
    }

    void OpenDeleteUserModal()
    {
        isDeleteModalOpen = true;
    }

    int selectedUserIdToDelete { get; set; }

    async Task DeleteSelectedUser()
    {
        await DeleteUser(selectedUserIdToDelete);
    }

    void CloseDeleteUserModal()
    {
        isDeleteModalOpen = false;
    }

    void AddUser()
    {
        if (string.IsNullOrWhiteSpace(newUser.Name) || string.IsNullOrWhiteSpace(newUser.Email))
        {
            ErrorMessage = "All fields are required.";
            return;
        }

        // Add user using UserService
        UserService.AddUser(newUser);
        SuccessMessage = "User added successfully!";
        CloseAddEditUserModal();
    }

    void OpenEditUserModal(User user)
    {
        isEditing = true;
        newUser = new User
        {
            Id = user.Id,
            Name = user.Name,
            Email = user.Email
        };
        isAddEditModalOpen = true;
        ErrorMessage = ""; // Clear error message when opening modal
        SuccessMessage = ""; // Clear success message when opening modal
    }

    async Task EditUser()
    {
        if (string.IsNullOrWhiteSpace(newUser.Name) || string.IsNullOrWhiteSpace(newUser.Email))
        {
            ErrorMessage = "All fields are required.";
            return;
        }

        // Edit user using UserService
        UserService.EditUser(newUser);
        SuccessMessage = "User edited successfully!";
        CloseAddEditUserModal();
    }

    async Task DeleteUser(int userId)
    {
        User userToDelete = users.FirstOrDefault(u => u.Id == userId);

        if (userToDelete != null)
        {
            UserService.DeleteUser(userToDelete.Id);
            users.Remove(userToDelete);
            SuccessMessage = "User deleted successfully!";
        }
        else
        {
            ErrorMessage = "User not found!";
        }
    }

    async Task ListAllUsers()
    {
        users = await UserService.GetUsers(users);
    }

    void HandleButtonClick()
    {
        if (isEditing)
        {
            EditUser();
        }
        else
        {
            AddUser();
        }
    }

    void GoBack()
    {
        Navigation.NavigateTo("/"); 
    }
}
